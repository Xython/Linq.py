

from linq import Flow
import linq.standard
Flow([(1, 2), (2, 3), (3, 2)]).Unboxed()
Flow([(1, 2), (2, 3), (3, 2)]).Sum(lambda x, y: x + y)
Flow([(1, 2), (2, 3), (3, 2)]).Enum()
Flow([(1, 2), (2, 3), (3, 2)]).Map(lambda x, y: x + y).ToTuple()
Flow([(1, 2), (2, 3)]).Then(lambda x: x); Flow([(1, 2), (2, 3)]).Then(lambda x, y: x + y)
Flow([(1, 2), (2, 3), (3, 2)]).Filter(lambda x, y: x + y)
Flow([(1, 1), (2, 2), (3, 2)]).Filter(lambda x, y: x is y).Filter().Filter(lambda x: x!=(3, 2)).All()
Flow([(1, 2), (2, 3), (3, 2)]).Each(lambda x, y: x + y)
Flow([1, 2, 3, 4, 5]).Aggregate(max, min, sum).ToTuple()
Flow([(1, 2), (2, 3), (3, 2)]).Zip( [(1, 2), (2, 2), (3, 3)] )
Flow([(1, 2), (2, 3), (3, 2)]).Sorted(lambda x, y: x + y)
Flow([1, 2, 3]).Sorted().Sorted(by=lambda x: -x)
Flow([(1, 2), (2, 3), (3, 2)]).ArgSorted(lambda x, y: x + y)
Flow([3, 2, 1]).ArgSorted(); Flow([(1,1),(2, 2), (3, 1)]).ArgSorted(by=lambda a, b: a*b).ToList()
Flow([(1, 2), (2, 3), (3, 2)]).Group(lambda x, y: x + y).ToTuple()
Flow([1, 1,  2, 3, 3]).Group().Map(lambda _ : (len(_), len(_))).Group(lambda a, b: a*b).ToTuple()
Flow([(1, 2), (2, 3), (3, 2)]).GroupBy(lambda x, y: x + y).ToTuple()
Flow([1, 1, 1]).GroupBy().ToList()
Flow([(1, 2), (2, 3), (3, 2)]).Take(1).ToTuple()
Flow([(1, 2), (2, 3), (3, 2)]).TakeIf(lambda x, y: x + y).ToTuple()
print(Flow([1,2,3]).TakeIf(lambda x: x%2).ToTuple())
Flow([(1, 2), (2, 3), (3, 2)]).TakeWhile(lambda x, y: x + y).ToTuple()
Flow([1, 2, 3, 4, 5, 6]).TakeWhile(lambda x: x<3).ToTuple()
Flow([(1, 2), (2, 3), (3, 2)]).Drop(1)
Flow([(1, 2), (2, 3), (3, 2)]).Skip(1)
Flow([(1, 2), (2, 3), (3, 2)]).Concat( [(1, 2), (2, 2), (3, 3)] ).ToTuple()
Flow([(1, 2), (2, 3), (3, 2)]).ToList()
Flow([(1, 2), (2, 3), (3, 2)]).ToTuple()
Flow([(1, 1), (2, 2), (3, 3)]).ToDict()
Flow([(1, 2), (2, 3), (3, 2)]).ToSet()
Flow([(1, 2), (2, 3), (3, 2)]).All(lambda x, y: x + y)
Flow([1, 1, 1]).All()
Flow([(1, 2), (2, 3), (3, 2)]).Any(lambda x, y: x + y)
Flow([1, 1, 1]).Any()
Flow((i for i in range(3))).Next()
Flow([(1, 2), (2, 2), (3, 3)]).Extended( [(1, 2), (2, 2), (3, 3)] )
Flow([(1, 2), (2, 2), (3, 3)]).Extend( [(1, 2), (2, 2), (3, 3)] )
Flow([(1, 2), (2, 2), (3, 3)]).Sort(lambda x, y: x + y)
Flow([(1, 2), (2, 2), (3, 3)]).Reverse()
Flow([(1, 2), (2, 2), (3, 3)]).Reversed()
Flow({(1, 1), (2, 2), (3, 3)}).Intersects( [(1, 2), (2, 2), (3, 3)] )
Flow({(1, 1), (2, 2), (3, 3)}).Union( [(1, 2), (2, 2), (3, 3)] )
